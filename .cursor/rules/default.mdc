---
description: 
globs: 
alwaysApply: true
---


### üîß **General Development Rules**
```yaml
- Use Next.js (App Router) with TypeScript.
- Use MongoDB with Mongoose for database modeling.
- Organize code in feature-based folders (e.g., /features/user, /features/post).
- Use socket.io for all real-time features.
- Ensure the app is responsive and PWA-compliant.
```

---

### üì¶ **Backend Rules**
```yaml
- Use Mongoose for MongoDB schemas and models.
- Group routes by feature domain: /api/user, /api/post, /api/discussion, etc.
- Use Zod or custom middleware to validate API inputs.
- Emit socket.io events for: new posts, discussions, poll votes, notifications.
- Use indexes on fields like `locality`, `createdBy`, and `startTime` for performance.
```

---

### üîê **Authentication & Authorization Rules**
```yaml
- Use NextAuth.js with credentials provider (email/password).
- Use JWT for session handling.
- Add role-based access middleware (user, moderator, admin).
- Authorization checks required for editing/deleting content and accessing moderator tools.
```

---

### üì≤ **Frontend & PWA Rules**
```yaml
- Use TailwindCSS for responsive design.
- Enable offline caching and push notifications using next-pwa.
- Prioritize SSR for content pages, use client-side rendering only when required (e.g., sockets).
- Subscribe to real-time data by locality via socket.io.
- Use Framer Motion for smooth transitions and interactivity.
```

---

### ü§ñ **AI Integration Rules**
```yaml
- Summarize post descriptions using Gemini API and save as `summarizedDescription`.
- Provide instant FAQ via prompt ‚Üí AI ‚Üí response (no storage).
- For advanced FAQ, store vectorized user prompts (future enhancement).
- Optimize AI costs: only summarize once per post unless edited.
```

---

### üèÖ **Incentive System Rules**
```yaml
- Track user contributions: eventsHosted, pollsVoted, discussionsStarted, petitionsCreated.
- Store `points` in user model. Increment on contribution.
- Use points for access gating (e.g., high-reputation events).
- Awards are separate documents linked to users (badges, milestones).
```

---

### üåê **Locality-Based Rules**
```yaml
- Each user has a `locality` field.
- Posts, polls, petitions, and notifications are filtered by locality.
- Socket channels and room subscriptions are based on locality.
- Future optimization: split MongoDB collections by locality if needed.
```

---

### üì¢ **Post / Notification / Event Rules**
```yaml
- Posts must include: `type`, `locality`, `priority`, `category`, `description`, and optionally `pollId`.
- If post is an event, link to `event` document with `startDate`, `duration`, and `location`.
- Notification schema is used for real-time alerts (linked to posts).
```

---

### üí¨ **Discussion & Poll Rules**
```yaml
- Discussions are linked to a post. Allow nesting for threads (future).
- Poll schema includes `options: {name: count}`, `postId`, and optional `petitionId`.
- One user can vote only once per poll. Store userId in a `votedUsers` field.
```

---

### üìä **Impact Visualization Rules**
```yaml
- Use basic user demographics (stored in user profile).
- For each policy (post), generate impact summary for demographic groups.
- Run sentiment analysis (Gemini or other) on user-submitted opinions.
```

---

### üß∞ **Neighborhood Initiative Tools**
```yaml
- Event Planning: create and manage events tied to locality.
- Petition Builder: generate + share with poll & AI summary.
- Task Management: (to be added later) ‚Äì basic tasks & volunteer coordination.
- Resource Sharing: services/marketplace per locality (future).
- Space Sharing: booking & availability tools for public/community spaces.
- Volunteer Management: assign roles, track activity, allow sign-ups.
```

---

### üß™ **Future & README Notes**
```yaml
- Plan to explore: one MongoDB collection per locality for scaling.
- Add AI-powered stored FAQ (vector search) later.
- Add moderator roles to prevent hierarchical stalling.
- Add nested discussions and awards as gamified elements.
- Allow filtering content by city, state, country if data grows.
```
